// Анаграма
//         Так називають слово, яке містить усі літери іншого слова
//         в тій самій кількості, але в іншому порядку.

// Постановка
//         Потрібно написати функцію, яка перевіряє, чи є два рядки анаграмами,
//         причому регістр букв не має значення.Враховуються лише символи;
//         прогалини або розділові знаки до уваги не беруться.


// Розбираємо завдання
//         Тут важливо враховувати, що необхідно перевіряти кожну літеру
//         у двох вхідних рядках та їх кількість у кожному рядку.

// finder → f: 1 friend → f: 1
// i: 1 r: 1
// n: 1 i: 1
// d: 1 e: 1
// e: 1 n: 1
// r: 1 d: 1

//         Для зберігання даних анаграми варто вибрати таку структуру,
//         як об'єктний літерал JavaScript. Ключ у цьому випадку – символ літери, значення – кількість її повторень у поточному рядку.

// Є й інші умови:

//         Потрібно переконатися, що регістр літер при порівнянні не враховується.
//         Просто перетворюємо обидва рядки в нижній або верхній регістр.
//         Виключаємо з порівняння усі не-символи. Найкраще працювати з регулярними виразами .

// Рішення

const buildCharObject = str => {
    const charObj = {}
    for (let char of str.replace(/[^\w]g).toLowerCase()){
        charObj[char] = charObj[char] + 1 || 1
    }
    return charObj
}